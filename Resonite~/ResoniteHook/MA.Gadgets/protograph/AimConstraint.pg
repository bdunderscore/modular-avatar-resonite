module AimConstraintBackend

in Weight: float
in AimVec: float3
in UpVec: float3

// From one of the AimWorldUp_X modules
in WorldUpVec: float3
in TargetVec: float3

in RestRotation: floatQ
in OffsetRotation: floatQ

// TODO: Axis lock

out this: floatQ

use CalculateAim

where {
    In_Weight = Weight->ValueRelay;
    In_AimVec = AimVec->ValueRelay;
    In_UpVec = UpVec->ValueRelay;
    In_WorldUpVec = WorldUpVec->ValueRelay;
    In_TargetVec = TargetVec->ValueRelay;
    In_RestRotation = RestRotation->ValueRelay;
    In_OffsetRotation = OffsetRotation->ValueRelay;

    AimOrientation = CalculateAim(
        OriginFwd=In_AimVec->Normalized_Float3,
        OriginUp=In_UpVec->Normalized_Float3,
        GoalFwd=In_TargetVec->Normalized_Float3,
        GoalUp=In_WorldUpVec->Normalized_Float3
    );

    Result=Slerp_floatQ(From=In_RestRotation, To=AimOrientation, Lerp=In_Weight);
    Out_Result = Result->ValueRelay;
    Out_Result;
}