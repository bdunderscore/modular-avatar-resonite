name: Update resonite cache

on:
  workflow_call:
    outputs:
      resonite_cache_key:
        description: 'resonite cache key'
        value: '${{ jobs.generate-or-check-cache.outputs.resonite_cache_key }}'
  workflow_dispatch:
  schedule:
    - cron: '37 4 * * *' # every day at 4:37 UTC
    
    
env:
  RPC_SERVER_SRC: Resonite~/ResoniteHook
  RESONITE_PATH: "C:\\Program Files (x86)\\Steam\\steamapps\\common\\Resonite"
  CACHE_SALT: -v2
  

jobs:
  generate-or-check-cache:
    outputs:
      resonite_cache_key: ${{ steps.select-cache-key.outputs.cache_key }}
      
    runs-on: windows-latest

    steps:
      # Write a datestamp for the current week to an output variable
      - name: Set date
        id: date
        run: |
          $date = Get-Date
          $yesterday = $date.AddDays(-1)
          
          $today_formatted = $date.ToString("yyyy-MM-dd")
          $yesterday_formatted = $yesterday.ToString("yyyy-MM-dd")

          echo "cache_key=resonite-$($today_formatted)${{ env.CACHE_SALT }}" >> $env:GITHUB_OUTPUT
          echo "prior_cache_key=resonite-$($yesterday_formatted)${{ env.CACHE_SALT }}" >> $env:GITHUB_OUTPUT

      - name: Check resonite cache
        id: check-resonite-cache
        uses: actions/cache@v4
        with:
          path: "${{ env.RESONITE_PATH }}"
          key: ${{ steps.date.outputs.cache_key }}
          lookup-only: 'true'
          
      - name: Try to restore prior day cache
        if: github.event_name != 'pull_request' && steps.check-resonite-cache.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          path: "${{ env.RESONITE_PATH }}"
          key: ${{ steps.date.outputs.prior_cache_key }}

      - name: Select cache key to use
        if: github.event_name == 'pull_request'
        id: select-cache-key
        run: |
          if ( "${{ steps.check-resonite-cache.outputs.cache-hit }}" -eq "true" -or "${{ github.event_name }}" -ne 'pull_request' ) {
            echo "cache_key=${{ steps.date.outputs.cache_key }}" >> $env:GITHUB_OUTPUT
          } else {
            echo "cache_key=${{ steps.date.outputs.prior_cache_key }}" >> $env:GITHUB_OUTPUT
          }
          
      - name: Setup steamcmd
        if: github.event_name != 'pull_request' && steps.check-resonite-cache.outputs.cache-hit != 'true'
        run: |
          cd c:\
          Invoke-WebRequest https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip -OutFile c:\steamcmd.zip
          Expand-Archive c:\steamcmd.zip -Force
          New-Item -ItemType Directory -Path "${{ env.RESONITE_PATH }}" -Force
          dir c:\steamcmd

      - name: Update steamcmd
        if: github.event_name != 'pull_request' && steps.check-resonite-cache.outputs.cache-hit != 'true'
        run: |
          $ErrorAction = "Ignore"
          # run updater first
          c:\steamcmd\steamcmd +quit
          # steamcmd exits with a nonzero error code even when successful, suppress the error
          Exit 0


      - name: Install or update resonite
        if: github.event_name != 'pull_request' && steps.check-resonite-cache.outputs.cache-hit != 'true'
        id: install-resonite
        run: |
          c:\steamcmd\steamcmd +force_install_dir "${{ env.RESONITE_PATH }}" +login ${{ secrets.STEAMUSER }} ${{ secrets.STEAMPASS }} +app_update 2519830 +quit

      - name: Save cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.check-resonite-cache.outputs.cache-hit != 'true'
        with:
          path: "${{ env.RESONITE_PATH }}"
          key: ${{ steps.date.outputs.cache_key }}